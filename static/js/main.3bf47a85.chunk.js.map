{"version":3,"sources":["requests.js","axios.js","Components/Banner.js","Components/Nav.js","Components/Row.js","Components/HomeScreen.js","features/userSlice.js","Screens/SignUpScreen.js","Screens/LoginScreen.js","Screens/PlanScreen.js","Screens/ProfileScreen.js","Screens/Stripe.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","instance","axios","create","baseURL","Banner","string","n","useState","movie","setMovie","useEffect","a","get","request","data","results","Math","floor","random","length","fetchData","className","style","backgroundImage","backdrop_path","backgroundSize","backgroundPosition","title","name","original_name","overview","substr","Nav","show","handleShow","history","useHistory","transitionNavBar","window","scrollY","addEventListener","removeEventListener","onClick","push","src","alt","Row","fetchUrl","isLargeRow","movies","setMovies","map","poster_path","id","HomeScreen","userSlice","createSlice","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","SignUpScreen","email","setEmail","password","setPassword","dispatch","useDispatch","value","type","placeholder","required","onChange","e","target","preventDefault","LoginScreen","signIn","setSignIn","PlanScreen","ProfileScreen","useSelector","color","Stripe","App","console","log","exact","path","configureStore","reducer","userReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3bf47a85.chunk.js","sourcesContent":["//const API_KEY = \"f81980ff410e46f422d64ddf3a56dddd\";//sonny\r\nconst API_KEY = \"19f84e11932abbc79e6d83f82d6d1045\";\r\n\r\nconst requests = {\r\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with-genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with-genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with-genres=27`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with-genres=10749`,\r\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with-genres=99`,\r\n};\r\nexport default requests;\r\n\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\nexport default instance;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./Banner.css\";\r\nimport axios from \"../axios\";\r\nimport requests from \"../requests\";\r\n\r\nfunction Banner() {\r\n  const [movie, setMovie] = useState([]);\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(requests.fetchNetflixOriginals);\r\n      setMovie(\r\n        request.data.results[\r\n          Math.floor(Math.random() * request.data.results.length - 1)\r\n        ]\r\n      );\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  function truncate(string, n) {\r\n    return string?.length > n ? string.substr(0, n - 1) + \"...\" : string;\r\n  }\r\n\r\n  return (\r\n    <header\r\n      className=\"banner\"\r\n      style={{\r\n        backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n        backgroundSize: \"cover\",\r\n        backgroundPosition: \"center center\",\r\n      }}\r\n    >\r\n      <div className=\"banner__contents\">\r\n        <h1 className=\"banner__title\">\r\n          {movie?.title || movie?.name || movie?.original_name}{\" \"}\r\n        </h1>\r\n        <div className=\"banner__buttons\">\r\n          <button className=\"banner__button\">Play</button>\r\n          <button className=\"banner__button\">My List</button>\r\n        </div>\r\n        <h1 className=\"banner__description\">\r\n          {truncate(movie?.overview, 100)}\r\n        </h1>\r\n      </div>\r\n      <div className=\"banner--fadeBottom\"></div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"./Nav.css\";\r\nfunction Nav() {\r\n  const [show, handleShow] = useState(false);\r\n  const history = useHistory();\r\n  const transitionNavBar = () => {\r\n    if (window.scrollY > 100) {\r\n      handleShow(true);\r\n    } else {\r\n      handleShow(false);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", transitionNavBar);\r\n    return () => window.removeEventListener(\"scroll\", transitionNavBar);\r\n  }, []);\r\n  return (\r\n    <div className={`nav ${show && \"nav__black\"}`}>\r\n      <div className=\"nav__contents\">\r\n        <img\r\n          onClick={() => history.push(\"/homescreen\")}\r\n          className=\"nav__logo\"\r\n          src=\"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"\r\n          alt=\"\"\r\n        />\r\n        <img\r\n          onClick={() => history.push(\"/profile\")}\r\n          className=\"nav__avatar\"\r\n          src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\r\n          alt=\"\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./Row.css\";\r\nimport axios from \"../axios\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow = false }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const base_url = \"https://image.tmdb.org/t/p/original/\";\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n      <div className=\"row__posters\">\r\n        {movies.map(\r\n          (movie) =>\r\n            ((isLargeRow && movie.poster_path) ||\r\n              (!isLargeRow && movie.backdrop_path)) && (\r\n              <img\r\n                key={movie.id}\r\n                className={`row__poster ${isLargeRow && \"row__posterLarge\"} `}\r\n                src={`${base_url}${\r\n                  isLargeRow ? movie.poster_path : movie.backdrop_path\r\n                }`}\r\n                alt={movie.name}\r\n              />\r\n            )\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","import React from \"react\";\r\nimport requests from \"../requests\";\r\nimport Banner from \"./Banner\";\r\nimport \"./HomeScreen.css\";\r\nimport Nav from \"./Nav\";\r\nimport Row from \"./Row\";\r\n\r\nfunction HomeScreen() {\r\n  return (\r\n    <div className=\"homeScreen\">\r\n      <Nav />\r\n      <Banner />\r\n      <Row\r\n        title=\"NETFLIX ORIGINALS\"\r\n        fetchUrl={requests.fetchNetflixOriginals}\r\n        isLargeRow={true}\r\n      />\r\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\r\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\r\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\r\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchNetflixOriginals} />\r\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchTrending} />\r\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchTopRated} />\r\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchNetflixOriginals} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomeScreen;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout: (state) => {\r\n      state.user = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\nexport const selectUser = (state) => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import React, { useRef, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { login } from \"../features/userSlice\";\r\nimport \"./SignUpScreen.css\";\r\nfunction SignUpScreen() {\r\n  //const emailRef = useRef(null);\r\n  //const passwordRef = useRef(null);\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const history = useHistory();\r\n\r\n  const dispatch = useDispatch();\r\n  const register = (e) => {\r\n    e.preventDefault();\r\n    if (email && password) {\r\n      dispatch(\r\n        login({\r\n          email: email,\r\n          password: password,\r\n        })\r\n      );\r\n      history.push(\"/profile\");\r\n    }\r\n\r\n    /* auth\r\n      .createUserWithEmailAndPassword(\r\n        emailRef.current.value,\r\n        passwordRef.current.value\r\n      )\r\n      .then((authUser) => {\r\n        console.log(authUser);\r\n      })\r\n      .catch((error) => {\r\n        alert(error.message);\r\n      }); */\r\n  };\r\n  const signIn = (e) => {\r\n    e.preventDefault();\r\n    if (email && password) {\r\n      dispatch(\r\n        login({\r\n          email: email,\r\n          password: password,\r\n        })\r\n      );\r\n      history.push(\"/profile\");\r\n    }\r\n    /* auth\r\n      .signInWithEmailAndPassword(\r\n        emailRef.current.value,\r\n        passwordRef.current.value\r\n      )\r\n      .then((authUser) => {\r\n        console.log(authUser);\r\n      })\r\n      .catch((error) => {\r\n        alert(error.message);\r\n      }); */\r\n  };\r\n  return (\r\n    <div className=\"signUpScreen\">\r\n      <form>\r\n        <h1>Sign In</h1>\r\n        <input\r\n          /* ref={emailRef} */ value={email}\r\n          type=\"Email\"\r\n          placeholder=\"Email...\"\r\n          required\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n        <input\r\n          /* ref={passwordRef} */ value={password}\r\n          type=\"password\"\r\n          placeholder=\"password...\"\r\n          required\r\n          onChange={(e) => setPassword(e.target.value)}\r\n        />\r\n        <button onClick={signIn} type=\"submit\">\r\n          Sign In\r\n        </button>\r\n        <h4>\r\n          {\" \"}\r\n          <span className=\"signUpScreen__gray\">New to Netflix?</span>\r\n          <span className=\"signUpScreen__link\" onClick={register}>\r\n            Sign up now.\r\n          </span>\r\n        </h4>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SignUpScreen;\r\n","import React, { useState } from \"react\";\r\nimport \"./LoginScreen.css\";\r\nimport SignUpScreen from \"./SignUpScreen\";\r\nfunction LoginScreen() {\r\n  const [signIn, setSignIn] = useState(false);\r\n  return (\r\n    <div className=\"loginScreen\">\r\n      <div className=\"loginScreen__background\">\r\n        <img\r\n          className=\"loginScreen__logo\"\r\n          src=\"https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"\r\n          alt=\"\"\r\n        />\r\n        <button onClick={() => setSignIn(true)} className=\"loginScreen__button\">\r\n          sign In\r\n        </button>\r\n        <div className=\"loginScreen__gradient\"></div>\r\n      </div>\r\n      <div className=\"loginScreen__body\">\r\n        {signIn ? (\r\n          <SignUpScreen />\r\n        ) : (\r\n          <>\r\n            <h1>Unlimited films, TV programmes and more.</h1>\r\n            <h2>Watch anywhere. Cancel at any time</h2>\r\n            <h3>\r\n              Ready to watch? Enter your email to create or restart your\r\n              membership.\r\n            </h3>\r\n            <div className=\"loginScreen__input\">\r\n              <form>\r\n                <input type=\"email\" placeholder=\"Email address...\" />\r\n                <button\r\n                  onClick={() => setSignIn(true)}\r\n                  className=\"loginScreen__getStarted\"\r\n                >\r\n                  Get Started\r\n                </button>\r\n              </form>\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoginScreen;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"./PlanScreen.css\";\r\nfunction PlanScreen() {\r\n  const history = useHistory();\r\n  return (\r\n    <div className=\"planScreen__plan\">\r\n      <div className=\"planScreen__info\">\r\n        <div className=\"planScreen__details\">\r\n          <h5>Premium</h5>\r\n          <h6>4K + HDR </h6>\r\n        </div>\r\n        <button onClick={() => history.push(\"/stripe\")}>Subscribe</button>\r\n      </div>\r\n      <div className=\"planScreen__info\">\r\n        <div className=\"planScreen__details\">\r\n          <h5>Basic ***</h5>\r\n          <h6>480p</h6>\r\n        </div>\r\n        <button onClick={() => history.push(\"/stripe\")}>Subscribe</button>\r\n      </div>\r\n      <div className=\"planScreen__info\">\r\n        <div className=\"planScreen__details\">\r\n          <h5>Standard</h5>\r\n          <h6>1080p</h6>\r\n        </div>\r\n        <button onClick={() => history.push(\"/stripe\")}>Subscribe</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PlanScreen;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Nav from \"../Components/Nav\";\r\nimport { logout, selectUser } from \"../features/userSlice\";\r\nimport PlanScreen from \"./PlanScreen\";\r\nimport \"./ProfileScreen.css\";\r\nfunction ProfileScreen() {\r\n  const user = useSelector(selectUser);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <div className=\"profileScreen\">\r\n      <Nav />\r\n      <div className=\"profileScreen__body\">\r\n        <h1>Edit profile</h1>\r\n        <div className=\"profileScreen__info\">\r\n          <img\r\n            src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\r\n            alt=\"\"\r\n          />\r\n          <div className=\"profileScreen__details\">\r\n            <h2>{user?.email} </h2>\r\n            <div className=\"profileScreen__plans\">\r\n              <h2 style={{ color: \"gold\" }}>Plans</h2>\r\n              <PlanScreen />\r\n              <button\r\n                onClick={() => dispatch(logout())}\r\n                className=\"profileScreen__signOut\"\r\n              >\r\n                Sign Out\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProfileScreen;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Nav from \"../Components/Nav\";\r\nimport \"./ProfileScreen.css\";\r\n//import { CardElement, useElements, useStripe } from \"@stripe/react-stripe-js\";\r\nfunction Stripe() {\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <div className=\"profileScreen\">\r\n      <Nav />\r\n      <div className=\"profileScreen__body\">\r\n        <div className=\"profileScreen__info\">\r\n          <div className=\"profileScreen__details\">\r\n            <h2>Welcome to NETFLIX </h2>\r\n            <div className=\"profileScreen__plans\">\r\n              <button\r\n                onClick={() => history.push(\"/homescreen\")}\r\n                className=\"profileScreen__signOut\"\r\n              >\r\n                Subscribe\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Stripe;\r\n","import React, { useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport HomeScreen from \"./Components/HomeScreen\";\r\nimport LoginScreen from \"./Screens/LoginScreen\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectUser } from \"./features/userSlice\";\r\nimport ProfileScreen from \"./Screens/ProfileScreen\";\r\nimport Stripe from \"./Screens/Stripe\";\r\nfunction App() {\r\n  const user = useSelector(selectUser);\r\n  /* useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\r\n      if (userAuth) {\r\n        dispatch(\r\n          login({\r\n            uid: userAuth.uid,\r\n            email: userAuth.email,\r\n          })\r\n        );\r\n      } else {\r\n        dispatch(logout());\r\n      }\r\n    });\r\n    return unsubscribe;\r\n  }, [dispatch]); */\r\n  console.log(\"user is\", user);\r\n  return (\r\n    <div className=\"app\">\r\n      <Router>\r\n        {!user ? (\r\n          <LoginScreen />\r\n        ) : (\r\n          <Switch>\r\n            <Route exact path=\"/profile\">\r\n              <ProfileScreen />\r\n            </Route>\r\n            <Route exact path=\"/stripe\">\r\n              <Stripe />\r\n            </Route>\r\n            <Route exact path=\"/homescreen\">\r\n              <HomeScreen />\r\n            </Route>\r\n          </Switch>\r\n        )}\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport userReducer from \"../features/userSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}